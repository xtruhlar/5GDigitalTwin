services:
#MongoDB
  mongo:
    image: mongo:6.0
    container_name: mongo
    command: --bind_ip 0.0.0.0
    restart: always
    env_file:
      - .env
    volumes:
      - mongodbdata:/data/db
      - mongodbdata:/data/configdb
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "27017/udp"
      - "27017/tcp"
    networks:
      default:
        ipv4_address: ${MONGO_IP}
#WebUI
  webui:
    image: docker_open5gs
    container_name: webui
    restart: always
    depends_on:
      - mongo
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=webui
    volumes:
      - ./webui:/mnt/webui
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "9999/tcp"
    ports:
      - "9999:9999/tcp"
    networks:
      default:
        ipv4_address: ${WEBUI_IP}
#NRF
  nrf:
    image: docker_open5gs
    container_name: nrf
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=nrf
    volumes:
      - ./nrf:/mnt/nrf
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "7777/tcp"
    networks:
      default:
        ipv4_address: ${NRF_IP}
#SCP
  scp:
    image: docker_open5gs
    depends_on:
      - nrf
    container_name: scp
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=scp
    volumes:
      - ./scp:/mnt/scp
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "7777/tcp"
    networks:
      default:
        ipv4_address: ${SCP_IP}
#AUSF
  ausf:
    image: docker_open5gs
    depends_on:
      - nrf
      - scp
    container_name: ausf
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=ausf
    volumes:
      - ./ausf:/mnt/ausf
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "7777/tcp"
    networks:
      default:
        ipv4_address: ${AUSF_IP}
#UDR
  udr:
    image: docker_open5gs
    depends_on:
      - nrf
      - scp
      - mongo
    container_name: udr
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=udr
    volumes:
      - ./udr:/mnt/udr
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "7777/tcp"
    networks:
      default:
        ipv4_address: ${UDR_IP}
#UDM
  udm:
    image: docker_open5gs
    depends_on:
      - nrf
      - scp
    container_name: udm
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=udm
    volumes:
      - ./udm:/mnt/udm
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "7777/tcp"
    networks:
      default:
        ipv4_address: ${UDM_IP}
#PCF
  pcf:
    image: docker_open5gs
    depends_on:
      - nrf
      - scp
      - mongo
    container_name: pcf
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=pcf
    volumes:
      - ./pcf:/mnt/pcf
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "7777/tcp"
      - "9091/tcp"
    networks:
      default:
        ipv4_address: ${PCF_IP}
#BSF
  bsf:
    image: docker_open5gs
    depends_on:
      - nrf
      - scp
      - mongo
    container_name: bsf
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=bsf
    volumes:
      - ./bsf:/mnt/bsf
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "7777/tcp"
    networks:
      default:
        ipv4_address: ${BSF_IP}
#NSSF
  nssf:
    image: docker_open5gs
    depends_on:
      - nrf
      - scp
      - mongo
    container_name: nssf
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=nssf
    volumes:
      - ./nssf:/mnt/nssf
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "7777/tcp"
    networks:
      default:
        ipv4_address: ${NSSF_IP}
#HSS
  hss:
    image: docker_open5gs
    container_name: hss
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=hss
    volumes:
      - ./hss:/mnt/hss
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - mongo
    expose:
      - "3868/udp"
      - "3868/tcp"
      - "3868/sctp"
      - "5868/udp"
      - "5868/tcp"
      - "5868/sctp"
    networks:
      default:
        ipv4_address: ${HSS_IP}
#SGWC
  sgwc:
    image: docker_open5gs
    depends_on:
      - smf
      - upf
    container_name: sgwc
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=sgwc
    volumes:
      - ./sgwc:/mnt/sgwc
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "2123/udp"
      - "8805/udp"
    networks:
      default:
        ipv4_address: ${SGWC_IP}
#SGWU
  sgwu:
    image: docker_open5gs
    depends_on:
      - smf
      - upf
    container_name: sgwu
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=sgwu
    volumes:
      - ./sgwu:/mnt/sgwu
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "8805/udp"
      - "2152/udp"
    # ports:
    #   - "2152:2152/udp"
    networks:
      default:
        ipv4_address: ${SGWU_IP}
#SMF
  smf:
    image: docker_open5gs
    depends_on:
      - nrf
      - scp
      - amf
    container_name: smf
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=smf
      - DEPLOY_MODE=ALL
    volumes:
      - ./smf:/mnt/smf
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "3868/udp"
      - "3868/tcp"
      - "3868/sctp"
      - "5868/udp"
      - "5868/tcp"
      - "5868/sctp"
      - "8805/udp"
      - "2123/udp"
      - "7777/tcp"
      - "9091/tcp"
    networks:
      default:
        ipv4_address: ${SMF_IP}
#UPF
  upf:
    image: docker_open5gs
    depends_on:
      - nrf
      - scp
      - smf
    container_name: upf
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=upf
    volumes:
      - ./upf:/mnt/upf
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "2152/udp"
      - "8805/udp"
      - "9091/tcp"
    # ports:
    #   - "2152:2152/udp"
    cap_add:
      - NET_ADMIN
    privileged: true
    sysctls:
      - net.ipv4.ip_forward=1
      #- net.ipv6.conf.all.disable_ipv6=0
    networks:
      default:
        ipv4_address: ${UPF_IP}
#AMF
  amf:
    image: docker_open5gs
    depends_on:
      - nrf
      - scp
      - ausf
      - udm
      - udr
      - pcf
      - bsf
    container_name: amf
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=amf
    volumes:
      - ./amf:/mnt/amf
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "38412/sctp"
      - "7777/tcp"
      - "9091/tcp"
    # ports:
    #   - "38412:38412/sctp"
    networks:
      default:
        ipv4_address: ${AMF_IP}
#MME
  mme:
    image: docker_open5gs
    depends_on:
      - hss
      - sgwc
      - sgwu
      - smf
      - upf
      - osmomsc
    container_name: mme
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=mme
    volumes:
      - ./mme:/mnt/mme
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "3868/udp"
      - "3868/tcp"
      - "3868/sctp"
      - "5868/udp"
      - "5868/tcp"
      - "5868/sctp"
      - "36412/sctp"
      - "2123/udp"
      - "9091/tcp"
    # ports:
    #   - "36412:36412/sctp"
    networks:
      default:
        ipv4_address: ${MME_IP}
#PCRF
  pcrf:
    image: docker_open5gs
    container_name: pcrf
    restart: always
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=pcrf
    depends_on:
      - mongo
    volumes:
      - ./pcrf:/mnt/pcrf
      - ./log:/open5gs/install/var/log/open5gs
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "3868/udp"
      - "3868/tcp"
      - "3868/sctp"
      - "5868/udp"
      - "5868/tcp"
      - "5868/sctp"
    networks:
      default:
        ipv4_address: ${PCRF_IP}
#DNS
  dns:
    build: ./dns
    image: docker_dns
    container_name: dns
    restart: always
    env_file:
      - .env
    volumes:
      - ./dns:/mnt/dns
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "53/udp"
    networks:
      default:
        ipv4_address: ${DNS_IP}
  rtpengine:
    build: ./rtpengine
    image: docker_rtpengine
    container_name: rtpengine
    privileged: true
    env_file:
      - .env
    volumes:
      - ./rtpengine:/mnt/rtpengine
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    cap_add:
      - NET_ADMIN
    environment:
      - TABLE=0
      - INTERFACE=${RTPENGINE_IP}
      - LISTEN_NG=${RTPENGINE_IP}:2223
      - PIDFILE=/run/ngcp-rtpengine-daemon.pid
      - PORT_MAX=50000
      - PORT_MIN=49000
      - NO_FALLBACK=no
      - TOS=184
    expose:
      - "2223/udp"
      - "49000-50000/udp"
    # ports:
    #   - "49000-50000:49000-50000/udp"
    networks:
      default:
        ipv4_address: ${RTPENGINE_IP}
#MySQL
  mysql:
    build: ./mysql
    image: docker_mysql
    container_name: mysql
    restart: always
    env_file:
      - .env
    volumes:
      - dbdata:/var/lib/mysql
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "3306/tcp"
    networks:
      default:
        ipv4_address: ${MYSQL_IP}
#PyHSS
  pyhss:
    build: ./pyhss
    image: docker_pyhss
    container_name: pyhss
    restart: always
    dns: ${DNS_IP}
    volumes:
      - ./pyhss:/mnt/pyhss
      - ./pyhss/logs:/pyhss/log/
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    depends_on:
      - dns
      - mysql
    expose:
      - "3868/udp"
      - "3868/tcp"
      - "8080/tcp"
    ports:
      - "8080:8080/tcp"
    networks:
      default:
        ipv4_address: ${PYHSS_IP}
#ICSCF
  icscf:
    image: docker_kamailio
    container_name: icscf
    restart: always
    dns: ${DNS_IP}
    volumes:
      - ./icscf:/mnt/icscf
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=icscf
    depends_on:
      - dns
      - mysql
      - pyhss
    expose:
      - "3869/udp"
      - "3869/tcp"
      - "4060/udp"
      - "4060/tcp"
    networks:
      default:
        ipv4_address: ${ICSCF_IP}
#SCSCF
  scscf:
    image: docker_kamailio
    container_name: scscf
    restart: always
    dns: ${DNS_IP}
    volumes:
      - ./scscf:/mnt/scscf
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=scscf
    depends_on:
      - dns
      - mysql
      - pyhss
    expose:
      - "3870/udp"
      - "3870/tcp"
      - "6060/udp"
      - "6060/tcp"
    networks:
      default:
        ipv4_address: ${SCSCF_IP}
#PCSCF
  pcscf:
    image: docker_kamailio
    container_name: pcscf
    restart: always
    dns: ${DNS_IP}
    privileged: true
    cap_add:
      - NET_ADMIN
    volumes:
      - ./pcscf:/mnt/pcscf
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=pcscf
      - DEPLOY_MODE=ALL
    depends_on:
      - dns
      - mysql
      - rtpengine
      - icscf
      - scscf
    expose:
      - "3871/udp"
      - "3871/tcp"
      - "5060/tcp"
      - "5060/udp"
      - "5100-5120/tcp"
      - "5100-5120/udp"
      - "6100-6120/tcp"
      - "6100-6120/udp"
    # ports:
    #   - "3871:3871/udp"
    #   - "3871:3871/tcp"
    #   - "5060:5060/tcp"
    #   - "5060:5060/udp"
    #   - "5100-5120:5100-5120/tcp"
    #   - "5100-5120:5100-5120/udp"
    #   - "6100-6120:6100-6120/tcp"
    #   - "6100-6120:6100-6120/udp"
    networks:
      default:
        ipv4_address: ${PCSCF_IP}
#SMSC
  smsc:
    image: docker_kamailio
    container_name: smsc
    restart: always
    dns: ${DNS_IP}
    volumes:
      - ./smsc:/mnt/smsc
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=smsc
    depends_on:
      - dns
      - mysql
    expose:
      - "7090/udp"
      - "7090/tcp"
    networks:
      default:
        ipv4_address: ${SMSC_IP}
#HLR
  osmomsc:
    build: ./osmomsc
    image: docker_osmomsc
    container_name: osmomsc
    restart: always
    volumes:
      - ./osmomsc:/mnt/osmomsc
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=osmomsc
    depends_on:
      - osmohlr
    expose:
      - "29118/sctp"
      - "2775/tcp"
    networks:
      default:
        ipv4_address: ${OSMOMSC_IP}
#HLR
  osmohlr:
    build: ./osmohlr
    image: docker_osmohlr
    container_name: osmohlr
    restart: always
    volumes:
      - ./osmohlr:/mnt/osmohlr
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    environment:
      - COMPONENT_NAME=osmohlr
    expose:
      - "4222/tcp"
    networks:
      default:
        ipv4_address: ${OSMOHLR_IP}
#Metrics - Prometheus
  metrics:
    build: ./metrics
    image: docker_metrics
    container_name: metrics
    restart: always
    env_file:
      - .env
    volumes:
      - ./metrics:/mnt/metrics
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    expose:
      - "9090/tcp"
    ports:
      - "9090:9090/tcp"
    networks:
      default:
        ipv4_address: ${METRICS_IP}
#Metrics - Grafana
  grafana:
    image: grafana/grafana:11.3.0
    container_name: grafana
    restart: always
    env_file:
      - .env
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/:/etc/grafana/provisioning/
      - ./grafana:/mnt/grafana
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      #- GF_INSTALL_PLUGINS=${GRAFANA_INSTALL_PLUGINS}
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_PATHS_DATA=/var/lib/grafana
      - METRICS_IP=${METRICS_IP}
    expose:
      - "3000/tcp"
    ports:
      - "3000:3000/tcp"
    networks:
      default:
        ipv4_address: ${GRAFANA_IP}
#Metrics - Netdata
  netdata:
    image: netdata/netdata:edge
    container_name: netdata
    ports:
      - "19999:19999"
    restart: always
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - netdataconfig:/etc/netdata
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      #- /:/host/root:ro,rslave
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /etc/localtime:/etc/localtime:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/log:/host/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /run/dbus:/run/dbus:ro
    environment:
      - NETDATA_CLAIM_TOKEN=${NETDATA_CLAIM_TOKEN}
      - NETDATA_CLAIM_URL=${NETDATA_CLAIM_URL}
      - NETDATA_CLAIM_ROOMS=${NETDATA_CLAIM_ROOMS}
    networks:
      default:
        ipv4_address: ${NETDATA_IP}

# Networks
networks:
  default:
    name: docker_open5gs_default
    ipam:
      config:
        - subnet: ${TEST_NETWORK}
# Volumes
volumes:
  grafana_data:
    name: grafana_data
  mongodbdata:
    name: docker_open5gs_mongodbdata
  dbdata:
    name: docker_open5gs_dbdata
  netdataconfig:
  netdatalib:
  netdatacache:

